apiVersion: apps/v1
kind: Deployment
metadata:
  name: order
  labels: { app: order }
spec:
  replicas: 1
  selector:
    matchLabels: { app: order }
  template:
    metadata:
      labels: { app: order }
    spec:
      containers:
        - name: app
          image: order:local
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000
          env:
            - name: PORT
              value: "3000"
            - name: DATABASE_URL
              valueFrom: { secretKeyRef: { name: app-db, key: url } }
            - name: DATABASE_USERNAME
              valueFrom: { secretKeyRef: { name: app-db, key: username } }
            - name: DATABASE_PASSWORD
              valueFrom: { secretKeyRef: { name: app-db, key: password } }
          readinessProbe:
            httpGet: { path: /actuator/health/readiness, port: http }
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            httpGet: { path: /actuator/health/liveness, port: http }
            initialDelaySeconds: 20
            periodSeconds: 10
          resources:
            requests: { cpu: "100m", memory: "128Mi" }
            limits:   { cpu: "500m", memory: "512Mi" }
---
apiVersion: v1
kind: Service
metadata:
  name: order
  labels: { app: order }
spec:
  selector: { app: order }
  ports:
    - name: http
      port: 80
      targetPort: http
  type: ClusterIP
